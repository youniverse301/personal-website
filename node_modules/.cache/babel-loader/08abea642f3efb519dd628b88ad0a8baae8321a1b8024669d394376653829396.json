{"ast":null,"code":"import VantaBase, { VANTA } from './_base.js';\nimport { rn, ri, mobileCheck, getBrightness } from './helpers.js';\nconst win = typeof window == 'object';\nlet THREE = win && window.THREE;\nclass Effect extends VantaBase {\n  static initClass() {\n    this.prototype.defaultOptions = {\n      color: 0xff3f81,\n      backgroundColor: 0x23153c,\n      points: 10,\n      maxDistance: 20,\n      spacing: 15,\n      showDots: true\n    };\n  }\n  constructor(userOptions) {\n    THREE = userOptions.THREE || THREE;\n    super(userOptions);\n  }\n\n  // onInit() {\n  //   this.geometry = new THREE.BoxGeometry( 10, 10, 10 );\n  //   this.material = new THREE.MeshLambertMaterial({\n  //     color: this.options.color,\n  //     emissive: this.options.color,\n  //     emissiveIntensity: 0.75\n  //   });\n  //   this.cube = new THREE.Mesh( this.geometry, this.material );\n  //   this.scene.add(this.cube);\n\n  //   const c = this.camera = new THREE.PerspectiveCamera( 75, this.width/this.height, 0.1, 1000 );\n  //   c.position.z = 30;\n  //   c.lookAt(0,0,0);\n  //   this.scene.add(c);\n\n  //   const light = new THREE.HemisphereLight( 0xffffff, this.options.backgroundColor , 1 );\n  //   this.scene.add(light);\n  // }\n\n  // onUpdate() {\n  //   this.cube.rotation.x += 0.01;\n  //   this.cube.rotation.y += 0.01;\n  // }\n\n  genPoint(x, y, z) {\n    let sphere;\n    if (!this.points) {\n      this.points = [];\n    }\n    if (this.options.showDots) {\n      const geometry = new THREE.SphereGeometry(0.25, 12, 12); // radius, width, height\n      const material = new THREE.MeshLambertMaterial({\n        color: this.options.color\n      });\n      sphere = new THREE.Mesh(geometry, material);\n    } else {\n      sphere = new THREE.Object3D();\n    }\n    this.cont.add(sphere);\n    sphere.ox = x;\n    sphere.oy = y;\n    sphere.oz = z;\n    sphere.position.set(x, y, z);\n    sphere.r = rn(-2, 2); // rotation rate\n    return this.points.push(sphere);\n  }\n  onInit() {\n    this.cont = new THREE.Group();\n    this.cont.position.set(0, 0, 0);\n    this.scene.add(this.cont);\n    let n = this.options.points;\n    let {\n      spacing\n    } = this.options;\n    if (mobileCheck()) {\n      n = ~~(n * 0.75);\n      spacing = ~~(spacing * 0.65);\n    }\n    const numPoints = n * n * 2;\n    this.linePositions = new Float32Array(numPoints * numPoints * 3);\n    this.lineColors = new Float32Array(numPoints * numPoints * 3);\n    const colorB = getBrightness(new THREE.Color(this.options.color));\n    const bgB = getBrightness(new THREE.Color(this.options.backgroundColor));\n    this.blending = colorB > bgB ? 'additive' : 'subtractive';\n    const geometry = new THREE.BufferGeometry();\n    geometry.setAttribute('position', new THREE.BufferAttribute(this.linePositions, 3).setUsage(THREE.DynamicDrawUsage));\n    geometry.setAttribute('color', new THREE.BufferAttribute(this.lineColors, 3).setUsage(THREE.DynamicDrawUsage));\n    geometry.computeBoundingSphere();\n    geometry.setDrawRange(0, 0);\n    const material = new THREE.LineBasicMaterial({\n      vertexColors: THREE.VertexColors,\n      blending: this.blending === 'additive' ? THREE.AdditiveBlending : null,\n      // blending: THREE.SubtractiveBlending\n      transparent: true\n    });\n    // blending: THREE.CustomBlending\n    // blendEquation: THREE.SubtractEquation\n    // blendSrc: THREE.SrcAlphaFactor\n    // blendDst: THREE.OneMinusSrcAlphaFactor\n\n    this.linesMesh = new THREE.LineSegments(geometry, material);\n    this.cont.add(this.linesMesh);\n    for (let i = 0; i <= n; i++) {\n      for (let j = 0; j <= n; j++) {\n        const y = ri(-3, 3);\n        const x = (i - n / 2) * spacing + ri(-5, 5);\n        let z = (j - n / 2) * spacing + ri(-5, 5);\n        if (i % 2) {\n          z += spacing * 0.5;\n        } // offset\n\n        // nexusX = Math.round(x / 20) * 20\n        // nexusZ = Math.round(z / 20) * 20\n        // x += (nexusX - x) * 0.01\n        // z += (nexusZ - z) * 0.01\n        this.genPoint(x, y - ri(5, 15), z);\n        this.genPoint(x + ri(-5, 5), y + ri(5, 15), z + ri(-5, 5));\n      }\n    }\n\n    //  # radius\n    //   width, # width\n    //   rn(0,1000), # startAng\n    //   rn(1,6), # ang\n    //   rn(0, 50/(radius+1) + 5) + 5/width/(radius+0.5), # y\n    //   Math.max(-rn(0.5,2), rn(1, 50-radius/2) - radius/2) * 0.25 # speed\n    // )\n\n    // PerspectiveCamera( fov, aspect, near, far )\n    this.camera = new THREE.PerspectiveCamera(25, this.width / this.height, 0.01, 10000);\n    this.camera.position.set(50, 100, 150);\n    this.scene.add(this.camera);\n\n    // ambience = new THREE.AmbientLight(0xffffff, 0.01)\n    // @scene.add(ambience)\n\n    // @pointLight = new THREE.PointLight(0xFFFFFF, 0.01)\n    // @pointLight.position.set(0, 150, 200)\n    // @scene.add( @pointLight )\n\n    const ambience = new THREE.AmbientLight(0xffffff, 0.75);\n    this.scene.add(ambience);\n    this.spot = new THREE.SpotLight(0xFFFFFF, 1);\n    this.spot.position.set(0, 200, 0);\n    this.spot.distance = 400;\n    this.spot.target = this.cont;\n    return this.scene.add(this.spot);\n  }\n  onDestroy() {\n    if (this.scene) this.scene.remove(this.linesMesh);\n    this.spot = this.points = this.linesMesh = this.lineColors = this.linePositions = null;\n  }\n  setOptions(userOptions) {\n    // allow setOptions to change point colors\n    super.setOptions(userOptions);\n    if (userOptions.color) {\n      this.points.forEach(p => {\n        p.material.color = new THREE.Color(userOptions.color);\n      });\n    }\n  }\n  onUpdate() {\n    let diff, t;\n    const c = this.camera;\n    if (Math.abs(c.tx - c.position.x) > 0.01) {\n      diff = c.tx - c.position.x;\n      c.position.x += diff * 0.02;\n    }\n    if (Math.abs(c.ty - c.position.y) > 0.01) {\n      diff = c.ty - c.position.y;\n      c.position.y += diff * 0.02;\n    }\n    c.lookAt(new THREE.Vector3(0, 0, 0));\n    // c.near = 0.01\n    // c.updateProjectionMatrix()\n\n    let vertexpos = 0;\n    let colorpos = 0;\n    let numConnected = 0;\n    const bgColor = new THREE.Color(this.options.backgroundColor);\n    const color = new THREE.Color(this.options.color);\n    const diffColor = color.clone().sub(bgColor);\n    if (this.rayCaster) {\n      this.rayCaster.setFromCamera(new THREE.Vector2(this.rcMouseX, this.rcMouseY), this.camera);\n    }\n\n    // # TEMPORARY RAY DRAWING\n    // pointA = @camera.position\n    // direction = @rayCaster.ray.direction\n    // direction.normalize()\n    // distance = 1000000 # at what distance to determine pointB\n    // pointB = new THREE.Vector3()\n    // pointB.addVectors( pointA, direction.multiplyScalar( distance ) )\n    // geometry = new THREE.Geometry()\n    // geometry.vertices.push( pointA )\n    // geometry.vertices.push( pointB )\n    // material = new THREE.LineBasicMaterial( { color : 0xffffff } )\n    // line = new THREE.Line( geometry, material )\n    // @scene.add( line )\n\n    for (let i = 0; i < this.points.length; i++) {\n      let dist, distToMouse;\n      const p = this.points[i];\n      // p.position.y += Math.sin(@t * 0.005 - 0.02 * p.ox + 0.015 * p.oz) * 0.02\n\n      if (this.rayCaster) {\n        distToMouse = this.rayCaster.ray.distanceToPoint(p.position);\n      } else {\n        distToMouse = 1000;\n      }\n      const distClamp = distToMouse.clamp(5, 15);\n      p.scale.x = p.scale.y = p.scale.z = ((15 - distClamp) * 0.25).clamp(1, 100);\n      if (p.r !== 0) {\n        let ang = Math.atan2(p.position.z, p.position.x);\n        dist = Math.sqrt(p.position.z * p.position.z + p.position.x * p.position.x);\n        ang += 0.00025 * p.r;\n        p.position.x = dist * Math.cos(ang);\n        p.position.z = dist * Math.sin(ang);\n      }\n      // p.position.x += Math.sin(@t * 0.01 + p.position.y) * 0.02\n      // p.position.z += Math.sin(@t * 0.01 - p.position.y) * 0.02\n\n      for (let j = i; j < this.points.length; j++) {\n        const p2 = this.points[j];\n        const dx = p.position.x - p2.position.x;\n        const dy = p.position.y - p2.position.y;\n        const dz = p.position.z - p2.position.z;\n        dist = Math.sqrt(dx * dx + dy * dy + dz * dz);\n        if (dist < this.options.maxDistance) {\n          let lineColor;\n          const alpha = ((1.0 - dist / this.options.maxDistance) * 2).clamp(0, 1);\n          if (this.blending === 'additive') {\n            lineColor = new THREE.Color(0x000000).lerp(diffColor, alpha);\n          } else {\n            lineColor = bgColor.clone().lerp(color, alpha);\n          }\n          // if @blending == 'subtractive'\n          //   lineColor = new THREE.Color(0x000000).lerp(diffColor, alpha)\n\n          this.linePositions[vertexpos++] = p.position.x;\n          this.linePositions[vertexpos++] = p.position.y;\n          this.linePositions[vertexpos++] = p.position.z;\n          this.linePositions[vertexpos++] = p2.position.x;\n          this.linePositions[vertexpos++] = p2.position.y;\n          this.linePositions[vertexpos++] = p2.position.z;\n          this.lineColors[colorpos++] = lineColor.r;\n          this.lineColors[colorpos++] = lineColor.g;\n          this.lineColors[colorpos++] = lineColor.b;\n          this.lineColors[colorpos++] = lineColor.r;\n          this.lineColors[colorpos++] = lineColor.g;\n          this.lineColors[colorpos++] = lineColor.b;\n          numConnected++;\n        }\n      }\n    }\n    this.linesMesh.geometry.setDrawRange(0, numConnected * 2);\n    this.linesMesh.geometry.attributes.position.needsUpdate = true;\n    this.linesMesh.geometry.attributes.color.needsUpdate = true;\n    // @pointCloud.geometry.attributes.position.needsUpdate = true\n\n    return this.t * 0.001;\n  }\n  onMouseMove(x, y) {\n    const c = this.camera;\n    if (!c.oy) {\n      c.oy = c.position.y;\n      c.ox = c.position.x;\n      c.oz = c.position.z;\n    }\n    const ang = Math.atan2(c.oz, c.ox);\n    const dist = Math.sqrt(c.oz * c.oz + c.ox * c.ox);\n    const tAng = ang + (x - 0.5) * 2 * (this.options.mouseCoeffX || 1);\n    c.tz = dist * Math.sin(tAng);\n    c.tx = dist * Math.cos(tAng);\n    c.ty = c.oy + (y - 0.5) * 50 * (this.options.mouseCoeffY || 1);\n    if (!this.rayCaster) {\n      // this.rayCaster = new THREE.Raycaster()\n    }\n    this.rcMouseX = x * 2 - 1;\n    this.rcMouseY = -x * 2 + 1;\n  }\n  onRestart() {\n    if (this.scene) this.scene.remove(this.linesMesh);\n    this.points = [];\n  }\n}\nEffect.initClass();\nexport default VANTA.register('NET', Effect);","map":{"version":3,"names":["VantaBase","VANTA","rn","ri","mobileCheck","getBrightness","win","window","THREE","Effect","initClass","prototype","defaultOptions","color","backgroundColor","points","maxDistance","spacing","showDots","constructor","userOptions","genPoint","x","y","z","sphere","options","geometry","SphereGeometry","material","MeshLambertMaterial","Mesh","Object3D","cont","add","ox","oy","oz","position","set","r","push","onInit","Group","scene","n","numPoints","linePositions","Float32Array","lineColors","colorB","Color","bgB","blending","BufferGeometry","setAttribute","BufferAttribute","setUsage","DynamicDrawUsage","computeBoundingSphere","setDrawRange","LineBasicMaterial","vertexColors","VertexColors","AdditiveBlending","transparent","linesMesh","LineSegments","i","j","camera","PerspectiveCamera","width","height","ambience","AmbientLight","spot","SpotLight","distance","target","onDestroy","remove","setOptions","forEach","p","onUpdate","diff","t","c","Math","abs","tx","ty","lookAt","Vector3","vertexpos","colorpos","numConnected","bgColor","diffColor","clone","sub","rayCaster","setFromCamera","Vector2","rcMouseX","rcMouseY","length","dist","distToMouse","ray","distanceToPoint","distClamp","clamp","scale","ang","atan2","sqrt","cos","sin","p2","dx","dy","dz","lineColor","alpha","lerp","g","b","attributes","needsUpdate","onMouseMove","tAng","mouseCoeffX","tz","mouseCoeffY","onRestart","register"],"sources":["/Users/bjornenge/repos/personal-website/personal-website/node_modules/vanta/src/vanta.net.js"],"sourcesContent":["import VantaBase, {VANTA} from './_base.js'\r\nimport {rn, ri, mobileCheck, getBrightness} from './helpers.js'\r\n\r\nconst win = typeof window == 'object'\r\nlet THREE = win && window.THREE\r\n\r\nclass Effect extends VantaBase {\r\n  static initClass() {\r\n    this.prototype.defaultOptions = {\r\n      color: 0xff3f81,\r\n      backgroundColor: 0x23153c,\r\n      points: 10,\r\n      maxDistance: 20,\r\n      spacing: 15,\r\n      showDots: true\r\n    }\r\n  }\r\n\r\n  constructor(userOptions) {\r\n    THREE = userOptions.THREE || THREE\r\n    super(userOptions)\r\n  }\r\n\r\n  // onInit() {\r\n  //   this.geometry = new THREE.BoxGeometry( 10, 10, 10 );\r\n  //   this.material = new THREE.MeshLambertMaterial({\r\n  //     color: this.options.color,\r\n  //     emissive: this.options.color,\r\n  //     emissiveIntensity: 0.75\r\n  //   });\r\n  //   this.cube = new THREE.Mesh( this.geometry, this.material );\r\n  //   this.scene.add(this.cube);\r\n\r\n  //   const c = this.camera = new THREE.PerspectiveCamera( 75, this.width/this.height, 0.1, 1000 );\r\n  //   c.position.z = 30;\r\n  //   c.lookAt(0,0,0);\r\n  //   this.scene.add(c);\r\n\r\n  //   const light = new THREE.HemisphereLight( 0xffffff, this.options.backgroundColor , 1 );\r\n  //   this.scene.add(light);\r\n  // }\r\n\r\n  // onUpdate() {\r\n  //   this.cube.rotation.x += 0.01;\r\n  //   this.cube.rotation.y += 0.01;\r\n  // }\r\n\r\n  genPoint(x, y, z) {\r\n    let sphere\r\n    if (!this.points) { this.points = [] }\r\n    if (this.options.showDots) {\r\n      const geometry = new THREE.SphereGeometry( 0.25, 12, 12 ) // radius, width, height\r\n      const material = new THREE.MeshLambertMaterial({\r\n        color: this.options.color})\r\n      sphere = new THREE.Mesh( geometry, material )\r\n    } else {\r\n      sphere = new THREE.Object3D()\r\n    }\r\n    this.cont.add( sphere )\r\n    sphere.ox = x\r\n    sphere.oy = y\r\n    sphere.oz = z\r\n    sphere.position.set(x,y,z)\r\n    sphere.r = rn(-2,2) // rotation rate\r\n    return this.points.push(sphere)\r\n  }\r\n\r\n  onInit() {\r\n    this.cont = new THREE.Group()\r\n    this.cont.position.set(0,0,0)\r\n    this.scene.add(this.cont)\r\n\r\n    let n = this.options.points\r\n    let { spacing } = this.options\r\n    if (mobileCheck()) {\r\n      n = ~~(n * 0.75)\r\n      spacing = ~~(spacing * 0.65)\r\n    }\r\n\r\n    const numPoints = n * n * 2\r\n    this.linePositions = new Float32Array( numPoints * numPoints * 3 )\r\n    this.lineColors = new Float32Array( numPoints * numPoints * 3 )\r\n\r\n    const colorB = getBrightness(new THREE.Color(this.options.color))\r\n    const bgB = getBrightness(new THREE.Color(this.options.backgroundColor))\r\n    this.blending =  colorB > bgB ? 'additive' : 'subtractive'\r\n\r\n    const geometry = new THREE.BufferGeometry()\r\n    geometry.setAttribute('position', new THREE.BufferAttribute(this.linePositions, 3).setUsage(THREE.DynamicDrawUsage))\r\n    geometry.setAttribute('color', new THREE.BufferAttribute(this.lineColors, 3).setUsage(THREE.DynamicDrawUsage))\r\n    geometry.computeBoundingSphere()\r\n    geometry.setDrawRange( 0, 0 )\r\n    const material = new THREE.LineBasicMaterial({\r\n      vertexColors: THREE.VertexColors,\r\n      blending: this.blending === 'additive' ? THREE.AdditiveBlending : null,\r\n      // blending: THREE.SubtractiveBlending\r\n      transparent: true\r\n    })\r\n      // blending: THREE.CustomBlending\r\n      // blendEquation: THREE.SubtractEquation\r\n      // blendSrc: THREE.SrcAlphaFactor\r\n      // blendDst: THREE.OneMinusSrcAlphaFactor\r\n\r\n    this.linesMesh = new THREE.LineSegments( geometry, material )\r\n    this.cont.add( this.linesMesh )\r\n\r\n    for (let i = 0; i<=n; i++) {\r\n      for (let j = 0; j<=n; j++) {\r\n        const y = ri(-3, 3)\r\n        const x = ((i - (n/2)) * spacing) + ri(-5,5)\r\n        let z = ((j - (n/2)) * spacing) + ri(-5,5)\r\n        if (i % 2) { z += spacing * 0.5 } // offset\r\n\r\n        // nexusX = Math.round(x / 20) * 20\r\n        // nexusZ = Math.round(z / 20) * 20\r\n        // x += (nexusX - x) * 0.01\r\n        // z += (nexusZ - z) * 0.01\r\n        this.genPoint(x, y - ri(5, 15), z)\r\n        this.genPoint(x + ri(-5,5), y + ri(5, 15), z + ri(-5,5))\r\n      }\r\n    }\r\n\r\n      //  # radius\r\n      //   width, # width\r\n      //   rn(0,1000), # startAng\r\n      //   rn(1,6), # ang\r\n      //   rn(0, 50/(radius+1) + 5) + 5/width/(radius+0.5), # y\r\n      //   Math.max(-rn(0.5,2), rn(1, 50-radius/2) - radius/2) * 0.25 # speed\r\n      // )\r\n\r\n    // PerspectiveCamera( fov, aspect, near, far )\r\n    this.camera = new THREE.PerspectiveCamera(\r\n      25,\r\n      this.width / this.height,\r\n      0.01, 10000)\r\n    this.camera.position.set(50, 100, 150)\r\n    this.scene.add( this.camera )\r\n\r\n    // ambience = new THREE.AmbientLight(0xffffff, 0.01)\r\n    // @scene.add(ambience)\r\n\r\n    // @pointLight = new THREE.PointLight(0xFFFFFF, 0.01)\r\n    // @pointLight.position.set(0, 150, 200)\r\n    // @scene.add( @pointLight )\r\n\r\n    const ambience = new THREE.AmbientLight(0xffffff, 0.75)\r\n    this.scene.add(ambience)\r\n\r\n    this.spot = new THREE.SpotLight(0xFFFFFF, 1)\r\n    this.spot.position.set(0, 200, 0)\r\n    this.spot.distance = 400\r\n    this.spot.target = this.cont\r\n    return this.scene.add(this.spot)\r\n  }\r\n\r\n  onDestroy() {\r\n    if (this.scene) this.scene.remove(this.linesMesh)\r\n    this.spot = this.points = this.linesMesh = this.lineColors = this.linePositions = null\r\n  }\r\n\r\n  setOptions(userOptions) { // allow setOptions to change point colors\r\n    super.setOptions(userOptions)\r\n    if (userOptions.color) {\r\n      this.points.forEach(p => {\r\n        p.material.color = new THREE.Color(userOptions.color)\r\n      })\r\n    }\r\n  }\r\n\r\n  onUpdate() {\r\n    let diff, t\r\n    const c = this.camera\r\n    if (Math.abs(c.tx - c.position.x) > 0.01) {\r\n      diff = c.tx - c.position.x\r\n      c.position.x += diff * 0.02\r\n    }\r\n    if (Math.abs(c.ty - c.position.y) > 0.01) {\r\n      diff = c.ty - c.position.y\r\n      c.position.y += diff * 0.02\r\n    }\r\n    c.lookAt( new THREE.Vector3( 0, 0, 0 ) )\r\n    // c.near = 0.01\r\n    // c.updateProjectionMatrix()\r\n\r\n    let vertexpos = 0\r\n    let colorpos = 0\r\n    let numConnected = 0\r\n\r\n    const bgColor = new THREE.Color(this.options.backgroundColor)\r\n    const color = new THREE.Color(this.options.color)\r\n    const diffColor = color.clone().sub(bgColor)\r\n\r\n    if (this.rayCaster) {\r\n      this.rayCaster.setFromCamera(new THREE.Vector2(this.rcMouseX,this.rcMouseY), this.camera);\r\n    }\r\n\r\n    // # TEMPORARY RAY DRAWING\r\n    // pointA = @camera.position\r\n    // direction = @rayCaster.ray.direction\r\n    // direction.normalize()\r\n    // distance = 1000000 # at what distance to determine pointB\r\n    // pointB = new THREE.Vector3()\r\n    // pointB.addVectors( pointA, direction.multiplyScalar( distance ) )\r\n    // geometry = new THREE.Geometry()\r\n    // geometry.vertices.push( pointA )\r\n    // geometry.vertices.push( pointB )\r\n    // material = new THREE.LineBasicMaterial( { color : 0xffffff } )\r\n    // line = new THREE.Line( geometry, material )\r\n    // @scene.add( line )\r\n\r\n    for (let i = 0; i < this.points.length; i++) {\r\n      let dist, distToMouse\r\n      const p = this.points[i]\r\n      // p.position.y += Math.sin(@t * 0.005 - 0.02 * p.ox + 0.015 * p.oz) * 0.02\r\n\r\n      if (this.rayCaster) {\r\n        distToMouse = this.rayCaster.ray.distanceToPoint(p.position)\r\n      } else {\r\n        distToMouse = 1000\r\n      }\r\n      const distClamp = distToMouse.clamp(5,15)\r\n      p.scale.x = (p.scale.y = (p.scale.z = ((15 - distClamp) * 0.25).clamp(1, 100)))\r\n\r\n      if (p.r !== 0) {\r\n        let ang = Math.atan2( p.position.z, p.position.x )\r\n        dist = Math.sqrt( (p.position.z * p.position.z) + (p.position.x * p.position.x) )\r\n        ang += 0.00025 * p.r\r\n        p.position.x = dist * Math.cos(ang)\r\n        p.position.z = dist * Math.sin(ang)\r\n      }\r\n        // p.position.x += Math.sin(@t * 0.01 + p.position.y) * 0.02\r\n        // p.position.z += Math.sin(@t * 0.01 - p.position.y) * 0.02\r\n\r\n      for (let j = i; j < this.points.length; j++) {\r\n        const p2 = this.points[j]\r\n        const dx = p.position.x - p2.position.x\r\n        const dy = p.position.y - p2.position.y\r\n        const dz = p.position.z - p2.position.z\r\n        dist = Math.sqrt( (dx * dx) + (dy * dy) + (dz * dz) )\r\n        if (dist < this.options.maxDistance) {\r\n          let lineColor\r\n          const alpha = (( 1.0 - (dist / this.options.maxDistance) ) * 2).clamp(0, 1)\r\n          if (this.blending === 'additive') {\r\n            lineColor = new THREE.Color(0x000000).lerp(diffColor, alpha)\r\n          } else {\r\n            lineColor = bgColor.clone().lerp(color, alpha)\r\n          }\r\n          // if @blending == 'subtractive'\r\n          //   lineColor = new THREE.Color(0x000000).lerp(diffColor, alpha)\r\n\r\n          this.linePositions[ vertexpos++ ] = p.position.x\r\n          this.linePositions[ vertexpos++ ] = p.position.y\r\n          this.linePositions[ vertexpos++ ] = p.position.z\r\n          this.linePositions[ vertexpos++ ] = p2.position.x\r\n          this.linePositions[ vertexpos++ ] = p2.position.y\r\n          this.linePositions[ vertexpos++ ] = p2.position.z\r\n\r\n          this.lineColors[ colorpos++ ] = lineColor.r\r\n          this.lineColors[ colorpos++ ] = lineColor.g\r\n          this.lineColors[ colorpos++ ] = lineColor.b\r\n          this.lineColors[ colorpos++ ] = lineColor.r\r\n          this.lineColors[ colorpos++ ] = lineColor.g\r\n          this.lineColors[ colorpos++ ] = lineColor.b\r\n\r\n          numConnected++\r\n        }\r\n      }\r\n    }\r\n    this.linesMesh.geometry.setDrawRange( 0, numConnected * 2 )\r\n    this.linesMesh.geometry.attributes.position.needsUpdate = true\r\n    this.linesMesh.geometry.attributes.color.needsUpdate = true\r\n    // @pointCloud.geometry.attributes.position.needsUpdate = true\r\n\r\n    return this.t * 0.001\r\n  }\r\n\r\n  onMouseMove(x,y) {\r\n    const c = this.camera\r\n    if (!c.oy) {\r\n      c.oy = c.position.y\r\n      c.ox = c.position.x\r\n      c.oz = c.position.z\r\n    }\r\n    const ang = Math.atan2(c.oz, c.ox)\r\n    const dist = Math.sqrt((c.oz*c.oz) + (c.ox*c.ox))\r\n    const tAng = ang + ((x-0.5) * 2 * (this.options.mouseCoeffX || 1))\r\n    c.tz = dist * Math.sin(tAng)\r\n    c.tx = dist * Math.cos(tAng)\r\n    c.ty = c.oy + ((y-0.5) * 50 * (this.options.mouseCoeffY || 1))\r\n\r\n    if (!this.rayCaster) {\r\n      // this.rayCaster = new THREE.Raycaster()\r\n    }\r\n    this.rcMouseX = (x * 2) - 1\r\n    this.rcMouseY = (- x * 2) + 1\r\n  }\r\n\r\n  onRestart() {\r\n    if (this.scene) this.scene.remove(this.linesMesh)\r\n    this.points = []\r\n  }\r\n}\r\nEffect.initClass()\r\nexport default VANTA.register('NET', Effect)"],"mappings":"AAAA,OAAOA,SAAS,IAAGC,KAAK,QAAO,YAAY;AAC3C,SAAQC,EAAE,EAAEC,EAAE,EAAEC,WAAW,EAAEC,aAAa,QAAO,cAAc;AAE/D,MAAMC,GAAG,GAAG,OAAOC,MAAM,IAAI,QAAQ;AACrC,IAAIC,KAAK,GAAGF,GAAG,IAAIC,MAAM,CAACC,KAAK;AAE/B,MAAMC,MAAM,SAAST,SAAS,CAAC;EAC7B,OAAOU,SAASA,CAAA,EAAG;IACjB,IAAI,CAACC,SAAS,CAACC,cAAc,GAAG;MAC9BC,KAAK,EAAE,QAAQ;MACfC,eAAe,EAAE,QAAQ;MACzBC,MAAM,EAAE,EAAE;MACVC,WAAW,EAAE,EAAE;MACfC,OAAO,EAAE,EAAE;MACXC,QAAQ,EAAE;IACZ,CAAC;EACH;EAEAC,WAAWA,CAACC,WAAW,EAAE;IACvBZ,KAAK,GAAGY,WAAW,CAACZ,KAAK,IAAIA,KAAK;IAClC,KAAK,CAACY,WAAW,CAAC;EACpB;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;;EAEA;EACA;EACA;;EAEA;EACA;EACA;EACA;;EAEAC,QAAQA,CAACC,CAAC,EAAEC,CAAC,EAAEC,CAAC,EAAE;IAChB,IAAIC,MAAM;IACV,IAAI,CAAC,IAAI,CAACV,MAAM,EAAE;MAAE,IAAI,CAACA,MAAM,GAAG,EAAE;IAAC;IACrC,IAAI,IAAI,CAACW,OAAO,CAACR,QAAQ,EAAE;MACzB,MAAMS,QAAQ,GAAG,IAAInB,KAAK,CAACoB,cAAc,CAAE,IAAI,EAAE,EAAE,EAAE,EAAG,CAAC,EAAC;MAC1D,MAAMC,QAAQ,GAAG,IAAIrB,KAAK,CAACsB,mBAAmB,CAAC;QAC7CjB,KAAK,EAAE,IAAI,CAACa,OAAO,CAACb;MAAK,CAAC,CAAC;MAC7BY,MAAM,GAAG,IAAIjB,KAAK,CAACuB,IAAI,CAAEJ,QAAQ,EAAEE,QAAS,CAAC;IAC/C,CAAC,MAAM;MACLJ,MAAM,GAAG,IAAIjB,KAAK,CAACwB,QAAQ,CAAC,CAAC;IAC/B;IACA,IAAI,CAACC,IAAI,CAACC,GAAG,CAAET,MAAO,CAAC;IACvBA,MAAM,CAACU,EAAE,GAAGb,CAAC;IACbG,MAAM,CAACW,EAAE,GAAGb,CAAC;IACbE,MAAM,CAACY,EAAE,GAAGb,CAAC;IACbC,MAAM,CAACa,QAAQ,CAACC,GAAG,CAACjB,CAAC,EAACC,CAAC,EAACC,CAAC,CAAC;IAC1BC,MAAM,CAACe,CAAC,GAAGtC,EAAE,CAAC,CAAC,CAAC,EAAC,CAAC,CAAC,EAAC;IACpB,OAAO,IAAI,CAACa,MAAM,CAAC0B,IAAI,CAAChB,MAAM,CAAC;EACjC;EAEAiB,MAAMA,CAAA,EAAG;IACP,IAAI,CAACT,IAAI,GAAG,IAAIzB,KAAK,CAACmC,KAAK,CAAC,CAAC;IAC7B,IAAI,CAACV,IAAI,CAACK,QAAQ,CAACC,GAAG,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC,CAAC;IAC7B,IAAI,CAACK,KAAK,CAACV,GAAG,CAAC,IAAI,CAACD,IAAI,CAAC;IAEzB,IAAIY,CAAC,GAAG,IAAI,CAACnB,OAAO,CAACX,MAAM;IAC3B,IAAI;MAAEE;IAAQ,CAAC,GAAG,IAAI,CAACS,OAAO;IAC9B,IAAItB,WAAW,CAAC,CAAC,EAAE;MACjByC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAAC;MAChB5B,OAAO,GAAG,CAAC,EAAEA,OAAO,GAAG,IAAI,CAAC;IAC9B;IAEA,MAAM6B,SAAS,GAAGD,CAAC,GAAGA,CAAC,GAAG,CAAC;IAC3B,IAAI,CAACE,aAAa,GAAG,IAAIC,YAAY,CAAEF,SAAS,GAAGA,SAAS,GAAG,CAAE,CAAC;IAClE,IAAI,CAACG,UAAU,GAAG,IAAID,YAAY,CAAEF,SAAS,GAAGA,SAAS,GAAG,CAAE,CAAC;IAE/D,MAAMI,MAAM,GAAG7C,aAAa,CAAC,IAAIG,KAAK,CAAC2C,KAAK,CAAC,IAAI,CAACzB,OAAO,CAACb,KAAK,CAAC,CAAC;IACjE,MAAMuC,GAAG,GAAG/C,aAAa,CAAC,IAAIG,KAAK,CAAC2C,KAAK,CAAC,IAAI,CAACzB,OAAO,CAACZ,eAAe,CAAC,CAAC;IACxE,IAAI,CAACuC,QAAQ,GAAIH,MAAM,GAAGE,GAAG,GAAG,UAAU,GAAG,aAAa;IAE1D,MAAMzB,QAAQ,GAAG,IAAInB,KAAK,CAAC8C,cAAc,CAAC,CAAC;IAC3C3B,QAAQ,CAAC4B,YAAY,CAAC,UAAU,EAAE,IAAI/C,KAAK,CAACgD,eAAe,CAAC,IAAI,CAACT,aAAa,EAAE,CAAC,CAAC,CAACU,QAAQ,CAACjD,KAAK,CAACkD,gBAAgB,CAAC,CAAC;IACpH/B,QAAQ,CAAC4B,YAAY,CAAC,OAAO,EAAE,IAAI/C,KAAK,CAACgD,eAAe,CAAC,IAAI,CAACP,UAAU,EAAE,CAAC,CAAC,CAACQ,QAAQ,CAACjD,KAAK,CAACkD,gBAAgB,CAAC,CAAC;IAC9G/B,QAAQ,CAACgC,qBAAqB,CAAC,CAAC;IAChChC,QAAQ,CAACiC,YAAY,CAAE,CAAC,EAAE,CAAE,CAAC;IAC7B,MAAM/B,QAAQ,GAAG,IAAIrB,KAAK,CAACqD,iBAAiB,CAAC;MAC3CC,YAAY,EAAEtD,KAAK,CAACuD,YAAY;MAChCV,QAAQ,EAAE,IAAI,CAACA,QAAQ,KAAK,UAAU,GAAG7C,KAAK,CAACwD,gBAAgB,GAAG,IAAI;MACtE;MACAC,WAAW,EAAE;IACf,CAAC,CAAC;IACA;IACA;IACA;IACA;;IAEF,IAAI,CAACC,SAAS,GAAG,IAAI1D,KAAK,CAAC2D,YAAY,CAAExC,QAAQ,EAAEE,QAAS,CAAC;IAC7D,IAAI,CAACI,IAAI,CAACC,GAAG,CAAE,IAAI,CAACgC,SAAU,CAAC;IAE/B,KAAK,IAAIE,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAEvB,CAAC,EAAEuB,CAAC,EAAE,EAAE;MACzB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAExB,CAAC,EAAEwB,CAAC,EAAE,EAAE;QACzB,MAAM9C,CAAC,GAAGpB,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;QACnB,MAAMmB,CAAC,GAAI,CAAC8C,CAAC,GAAIvB,CAAC,GAAC,CAAE,IAAI5B,OAAO,GAAId,EAAE,CAAC,CAAC,CAAC,EAAC,CAAC,CAAC;QAC5C,IAAIqB,CAAC,GAAI,CAAC6C,CAAC,GAAIxB,CAAC,GAAC,CAAE,IAAI5B,OAAO,GAAId,EAAE,CAAC,CAAC,CAAC,EAAC,CAAC,CAAC;QAC1C,IAAIiE,CAAC,GAAG,CAAC,EAAE;UAAE5C,CAAC,IAAIP,OAAO,GAAG,GAAG;QAAC,CAAC,CAAC;;QAElC;QACA;QACA;QACA;QACA,IAAI,CAACI,QAAQ,CAACC,CAAC,EAAEC,CAAC,GAAGpB,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,EAAEqB,CAAC,CAAC;QAClC,IAAI,CAACH,QAAQ,CAACC,CAAC,GAAGnB,EAAE,CAAC,CAAC,CAAC,EAAC,CAAC,CAAC,EAAEoB,CAAC,GAAGpB,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,EAAEqB,CAAC,GAAGrB,EAAE,CAAC,CAAC,CAAC,EAAC,CAAC,CAAC,CAAC;MAC1D;IACF;;IAEE;IACA;IACA;IACA;IACA;IACA;IACA;;IAEF;IACA,IAAI,CAACmE,MAAM,GAAG,IAAI9D,KAAK,CAAC+D,iBAAiB,CACvC,EAAE,EACF,IAAI,CAACC,KAAK,GAAG,IAAI,CAACC,MAAM,EACxB,IAAI,EAAE,KAAK,CAAC;IACd,IAAI,CAACH,MAAM,CAAChC,QAAQ,CAACC,GAAG,CAAC,EAAE,EAAE,GAAG,EAAE,GAAG,CAAC;IACtC,IAAI,CAACK,KAAK,CAACV,GAAG,CAAE,IAAI,CAACoC,MAAO,CAAC;;IAE7B;IACA;;IAEA;IACA;IACA;;IAEA,MAAMI,QAAQ,GAAG,IAAIlE,KAAK,CAACmE,YAAY,CAAC,QAAQ,EAAE,IAAI,CAAC;IACvD,IAAI,CAAC/B,KAAK,CAACV,GAAG,CAACwC,QAAQ,CAAC;IAExB,IAAI,CAACE,IAAI,GAAG,IAAIpE,KAAK,CAACqE,SAAS,CAAC,QAAQ,EAAE,CAAC,CAAC;IAC5C,IAAI,CAACD,IAAI,CAACtC,QAAQ,CAACC,GAAG,CAAC,CAAC,EAAE,GAAG,EAAE,CAAC,CAAC;IACjC,IAAI,CAACqC,IAAI,CAACE,QAAQ,GAAG,GAAG;IACxB,IAAI,CAACF,IAAI,CAACG,MAAM,GAAG,IAAI,CAAC9C,IAAI;IAC5B,OAAO,IAAI,CAACW,KAAK,CAACV,GAAG,CAAC,IAAI,CAAC0C,IAAI,CAAC;EAClC;EAEAI,SAASA,CAAA,EAAG;IACV,IAAI,IAAI,CAACpC,KAAK,EAAE,IAAI,CAACA,KAAK,CAACqC,MAAM,CAAC,IAAI,CAACf,SAAS,CAAC;IACjD,IAAI,CAACU,IAAI,GAAG,IAAI,CAAC7D,MAAM,GAAG,IAAI,CAACmD,SAAS,GAAG,IAAI,CAACjB,UAAU,GAAG,IAAI,CAACF,aAAa,GAAG,IAAI;EACxF;EAEAmC,UAAUA,CAAC9D,WAAW,EAAE;IAAE;IACxB,KAAK,CAAC8D,UAAU,CAAC9D,WAAW,CAAC;IAC7B,IAAIA,WAAW,CAACP,KAAK,EAAE;MACrB,IAAI,CAACE,MAAM,CAACoE,OAAO,CAACC,CAAC,IAAI;QACvBA,CAAC,CAACvD,QAAQ,CAAChB,KAAK,GAAG,IAAIL,KAAK,CAAC2C,KAAK,CAAC/B,WAAW,CAACP,KAAK,CAAC;MACvD,CAAC,CAAC;IACJ;EACF;EAEAwE,QAAQA,CAAA,EAAG;IACT,IAAIC,IAAI,EAAEC,CAAC;IACX,MAAMC,CAAC,GAAG,IAAI,CAAClB,MAAM;IACrB,IAAImB,IAAI,CAACC,GAAG,CAACF,CAAC,CAACG,EAAE,GAAGH,CAAC,CAAClD,QAAQ,CAAChB,CAAC,CAAC,GAAG,IAAI,EAAE;MACxCgE,IAAI,GAAGE,CAAC,CAACG,EAAE,GAAGH,CAAC,CAAClD,QAAQ,CAAChB,CAAC;MAC1BkE,CAAC,CAAClD,QAAQ,CAAChB,CAAC,IAAIgE,IAAI,GAAG,IAAI;IAC7B;IACA,IAAIG,IAAI,CAACC,GAAG,CAACF,CAAC,CAACI,EAAE,GAAGJ,CAAC,CAAClD,QAAQ,CAACf,CAAC,CAAC,GAAG,IAAI,EAAE;MACxC+D,IAAI,GAAGE,CAAC,CAACI,EAAE,GAAGJ,CAAC,CAAClD,QAAQ,CAACf,CAAC;MAC1BiE,CAAC,CAAClD,QAAQ,CAACf,CAAC,IAAI+D,IAAI,GAAG,IAAI;IAC7B;IACAE,CAAC,CAACK,MAAM,CAAE,IAAIrF,KAAK,CAACsF,OAAO,CAAE,CAAC,EAAE,CAAC,EAAE,CAAE,CAAE,CAAC;IACxC;IACA;;IAEA,IAAIC,SAAS,GAAG,CAAC;IACjB,IAAIC,QAAQ,GAAG,CAAC;IAChB,IAAIC,YAAY,GAAG,CAAC;IAEpB,MAAMC,OAAO,GAAG,IAAI1F,KAAK,CAAC2C,KAAK,CAAC,IAAI,CAACzB,OAAO,CAACZ,eAAe,CAAC;IAC7D,MAAMD,KAAK,GAAG,IAAIL,KAAK,CAAC2C,KAAK,CAAC,IAAI,CAACzB,OAAO,CAACb,KAAK,CAAC;IACjD,MAAMsF,SAAS,GAAGtF,KAAK,CAACuF,KAAK,CAAC,CAAC,CAACC,GAAG,CAACH,OAAO,CAAC;IAE5C,IAAI,IAAI,CAACI,SAAS,EAAE;MAClB,IAAI,CAACA,SAAS,CAACC,aAAa,CAAC,IAAI/F,KAAK,CAACgG,OAAO,CAAC,IAAI,CAACC,QAAQ,EAAC,IAAI,CAACC,QAAQ,CAAC,EAAE,IAAI,CAACpC,MAAM,CAAC;IAC3F;;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;;IAEA,KAAK,IAAIF,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAACrD,MAAM,CAAC4F,MAAM,EAAEvC,CAAC,EAAE,EAAE;MAC3C,IAAIwC,IAAI,EAAEC,WAAW;MACrB,MAAMzB,CAAC,GAAG,IAAI,CAACrE,MAAM,CAACqD,CAAC,CAAC;MACxB;;MAEA,IAAI,IAAI,CAACkC,SAAS,EAAE;QAClBO,WAAW,GAAG,IAAI,CAACP,SAAS,CAACQ,GAAG,CAACC,eAAe,CAAC3B,CAAC,CAAC9C,QAAQ,CAAC;MAC9D,CAAC,MAAM;QACLuE,WAAW,GAAG,IAAI;MACpB;MACA,MAAMG,SAAS,GAAGH,WAAW,CAACI,KAAK,CAAC,CAAC,EAAC,EAAE,CAAC;MACzC7B,CAAC,CAAC8B,KAAK,CAAC5F,CAAC,GAAI8D,CAAC,CAAC8B,KAAK,CAAC3F,CAAC,GAAI6D,CAAC,CAAC8B,KAAK,CAAC1F,CAAC,GAAG,CAAC,CAAC,EAAE,GAAGwF,SAAS,IAAI,IAAI,EAAEC,KAAK,CAAC,CAAC,EAAE,GAAG,CAAG;MAE/E,IAAI7B,CAAC,CAAC5C,CAAC,KAAK,CAAC,EAAE;QACb,IAAI2E,GAAG,GAAG1B,IAAI,CAAC2B,KAAK,CAAEhC,CAAC,CAAC9C,QAAQ,CAACd,CAAC,EAAE4D,CAAC,CAAC9C,QAAQ,CAAChB,CAAE,CAAC;QAClDsF,IAAI,GAAGnB,IAAI,CAAC4B,IAAI,CAAGjC,CAAC,CAAC9C,QAAQ,CAACd,CAAC,GAAG4D,CAAC,CAAC9C,QAAQ,CAACd,CAAC,GAAK4D,CAAC,CAAC9C,QAAQ,CAAChB,CAAC,GAAG8D,CAAC,CAAC9C,QAAQ,CAAChB,CAAG,CAAC;QACjF6F,GAAG,IAAI,OAAO,GAAG/B,CAAC,CAAC5C,CAAC;QACpB4C,CAAC,CAAC9C,QAAQ,CAAChB,CAAC,GAAGsF,IAAI,GAAGnB,IAAI,CAAC6B,GAAG,CAACH,GAAG,CAAC;QACnC/B,CAAC,CAAC9C,QAAQ,CAACd,CAAC,GAAGoF,IAAI,GAAGnB,IAAI,CAAC8B,GAAG,CAACJ,GAAG,CAAC;MACrC;MACE;MACA;;MAEF,KAAK,IAAI9C,CAAC,GAAGD,CAAC,EAAEC,CAAC,GAAG,IAAI,CAACtD,MAAM,CAAC4F,MAAM,EAAEtC,CAAC,EAAE,EAAE;QAC3C,MAAMmD,EAAE,GAAG,IAAI,CAACzG,MAAM,CAACsD,CAAC,CAAC;QACzB,MAAMoD,EAAE,GAAGrC,CAAC,CAAC9C,QAAQ,CAAChB,CAAC,GAAGkG,EAAE,CAAClF,QAAQ,CAAChB,CAAC;QACvC,MAAMoG,EAAE,GAAGtC,CAAC,CAAC9C,QAAQ,CAACf,CAAC,GAAGiG,EAAE,CAAClF,QAAQ,CAACf,CAAC;QACvC,MAAMoG,EAAE,GAAGvC,CAAC,CAAC9C,QAAQ,CAACd,CAAC,GAAGgG,EAAE,CAAClF,QAAQ,CAACd,CAAC;QACvCoF,IAAI,GAAGnB,IAAI,CAAC4B,IAAI,CAAGI,EAAE,GAAGA,EAAE,GAAKC,EAAE,GAAGA,EAAG,GAAIC,EAAE,GAAGA,EAAI,CAAC;QACrD,IAAIf,IAAI,GAAG,IAAI,CAAClF,OAAO,CAACV,WAAW,EAAE;UACnC,IAAI4G,SAAS;UACb,MAAMC,KAAK,GAAG,CAAC,CAAE,GAAG,GAAIjB,IAAI,GAAG,IAAI,CAAClF,OAAO,CAACV,WAAY,IAAK,CAAC,EAAEiG,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC;UAC3E,IAAI,IAAI,CAAC5D,QAAQ,KAAK,UAAU,EAAE;YAChCuE,SAAS,GAAG,IAAIpH,KAAK,CAAC2C,KAAK,CAAC,QAAQ,CAAC,CAAC2E,IAAI,CAAC3B,SAAS,EAAE0B,KAAK,CAAC;UAC9D,CAAC,MAAM;YACLD,SAAS,GAAG1B,OAAO,CAACE,KAAK,CAAC,CAAC,CAAC0B,IAAI,CAACjH,KAAK,EAAEgH,KAAK,CAAC;UAChD;UACA;UACA;;UAEA,IAAI,CAAC9E,aAAa,CAAEgD,SAAS,EAAE,CAAE,GAAGX,CAAC,CAAC9C,QAAQ,CAAChB,CAAC;UAChD,IAAI,CAACyB,aAAa,CAAEgD,SAAS,EAAE,CAAE,GAAGX,CAAC,CAAC9C,QAAQ,CAACf,CAAC;UAChD,IAAI,CAACwB,aAAa,CAAEgD,SAAS,EAAE,CAAE,GAAGX,CAAC,CAAC9C,QAAQ,CAACd,CAAC;UAChD,IAAI,CAACuB,aAAa,CAAEgD,SAAS,EAAE,CAAE,GAAGyB,EAAE,CAAClF,QAAQ,CAAChB,CAAC;UACjD,IAAI,CAACyB,aAAa,CAAEgD,SAAS,EAAE,CAAE,GAAGyB,EAAE,CAAClF,QAAQ,CAACf,CAAC;UACjD,IAAI,CAACwB,aAAa,CAAEgD,SAAS,EAAE,CAAE,GAAGyB,EAAE,CAAClF,QAAQ,CAACd,CAAC;UAEjD,IAAI,CAACyB,UAAU,CAAE+C,QAAQ,EAAE,CAAE,GAAG4B,SAAS,CAACpF,CAAC;UAC3C,IAAI,CAACS,UAAU,CAAE+C,QAAQ,EAAE,CAAE,GAAG4B,SAAS,CAACG,CAAC;UAC3C,IAAI,CAAC9E,UAAU,CAAE+C,QAAQ,EAAE,CAAE,GAAG4B,SAAS,CAACI,CAAC;UAC3C,IAAI,CAAC/E,UAAU,CAAE+C,QAAQ,EAAE,CAAE,GAAG4B,SAAS,CAACpF,CAAC;UAC3C,IAAI,CAACS,UAAU,CAAE+C,QAAQ,EAAE,CAAE,GAAG4B,SAAS,CAACG,CAAC;UAC3C,IAAI,CAAC9E,UAAU,CAAE+C,QAAQ,EAAE,CAAE,GAAG4B,SAAS,CAACI,CAAC;UAE3C/B,YAAY,EAAE;QAChB;MACF;IACF;IACA,IAAI,CAAC/B,SAAS,CAACvC,QAAQ,CAACiC,YAAY,CAAE,CAAC,EAAEqC,YAAY,GAAG,CAAE,CAAC;IAC3D,IAAI,CAAC/B,SAAS,CAACvC,QAAQ,CAACsG,UAAU,CAAC3F,QAAQ,CAAC4F,WAAW,GAAG,IAAI;IAC9D,IAAI,CAAChE,SAAS,CAACvC,QAAQ,CAACsG,UAAU,CAACpH,KAAK,CAACqH,WAAW,GAAG,IAAI;IAC3D;;IAEA,OAAO,IAAI,CAAC3C,CAAC,GAAG,KAAK;EACvB;EAEA4C,WAAWA,CAAC7G,CAAC,EAACC,CAAC,EAAE;IACf,MAAMiE,CAAC,GAAG,IAAI,CAAClB,MAAM;IACrB,IAAI,CAACkB,CAAC,CAACpD,EAAE,EAAE;MACToD,CAAC,CAACpD,EAAE,GAAGoD,CAAC,CAAClD,QAAQ,CAACf,CAAC;MACnBiE,CAAC,CAACrD,EAAE,GAAGqD,CAAC,CAAClD,QAAQ,CAAChB,CAAC;MACnBkE,CAAC,CAACnD,EAAE,GAAGmD,CAAC,CAAClD,QAAQ,CAACd,CAAC;IACrB;IACA,MAAM2F,GAAG,GAAG1B,IAAI,CAAC2B,KAAK,CAAC5B,CAAC,CAACnD,EAAE,EAAEmD,CAAC,CAACrD,EAAE,CAAC;IAClC,MAAMyE,IAAI,GAAGnB,IAAI,CAAC4B,IAAI,CAAE7B,CAAC,CAACnD,EAAE,GAACmD,CAAC,CAACnD,EAAE,GAAKmD,CAAC,CAACrD,EAAE,GAACqD,CAAC,CAACrD,EAAG,CAAC;IACjD,MAAMiG,IAAI,GAAGjB,GAAG,GAAI,CAAC7F,CAAC,GAAC,GAAG,IAAI,CAAC,IAAI,IAAI,CAACI,OAAO,CAAC2G,WAAW,IAAI,CAAC,CAAE;IAClE7C,CAAC,CAAC8C,EAAE,GAAG1B,IAAI,GAAGnB,IAAI,CAAC8B,GAAG,CAACa,IAAI,CAAC;IAC5B5C,CAAC,CAACG,EAAE,GAAGiB,IAAI,GAAGnB,IAAI,CAAC6B,GAAG,CAACc,IAAI,CAAC;IAC5B5C,CAAC,CAACI,EAAE,GAAGJ,CAAC,CAACpD,EAAE,GAAI,CAACb,CAAC,GAAC,GAAG,IAAI,EAAE,IAAI,IAAI,CAACG,OAAO,CAAC6G,WAAW,IAAI,CAAC,CAAE;IAE9D,IAAI,CAAC,IAAI,CAACjC,SAAS,EAAE;MACnB;IAAA;IAEF,IAAI,CAACG,QAAQ,GAAInF,CAAC,GAAG,CAAC,GAAI,CAAC;IAC3B,IAAI,CAACoF,QAAQ,GAAI,CAAEpF,CAAC,GAAG,CAAC,GAAI,CAAC;EAC/B;EAEAkH,SAASA,CAAA,EAAG;IACV,IAAI,IAAI,CAAC5F,KAAK,EAAE,IAAI,CAACA,KAAK,CAACqC,MAAM,CAAC,IAAI,CAACf,SAAS,CAAC;IACjD,IAAI,CAACnD,MAAM,GAAG,EAAE;EAClB;AACF;AACAN,MAAM,CAACC,SAAS,CAAC,CAAC;AAClB,eAAeT,KAAK,CAACwI,QAAQ,CAAC,KAAK,EAAEhI,MAAM,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}